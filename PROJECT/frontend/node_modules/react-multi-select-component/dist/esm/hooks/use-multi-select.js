function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useEffect, useMemo, useState } from "react";
import { injectStyles } from "../lib/inject-style";
var defaultStrings = {
  allItemsAreSelected: "All items are selected.",
  clearSearch: "Clear Search",
  clearSelected: "Clear Selected",
  noOptions: "No options",
  search: "Search",
  selectAll: "Select All",
  selectAllFiltered: "Select All (Filtered)",
  selectSomeItems: "Select...",
  create: "Create"
};
var defaultProps = {
  value: [],
  hasSelectAll: true,
  className: "multi-select",
  debounceDuration: 200,
  options: []
};
var MultiSelectContext = /*#__PURE__*/React.createContext({});
export var MultiSelectProvider = _ref => {
  var {
    props,
    children
  } = _ref;
  var [options, setOptions] = useState(props.options);

  var t = key => {
    var _props$overrideString;

    return ((_props$overrideString = props.overrideStrings) == null ? void 0 : _props$overrideString[key]) || defaultStrings[key];
  };

  useMemo(() => injectStyles(), []);
  useEffect(() => {
    setOptions(props.options);
  }, [props.options]);
  return /*#__PURE__*/React.createElement(MultiSelectContext.Provider, {
    value: _extends({
      t
    }, defaultProps, props, {
      options,
      setOptions
    })
  }, children);
};
export var useMultiSelect = () => React.useContext(MultiSelectContext);
//# sourceMappingURL=use-multi-select.js.map