/*
 * copied from https://github.com/imbhargav5/rooks/blob/master/packages/shared/useKeyRef.ts
 */
import { useCallback, useEffect, useMemo, useRef } from "react";
var defaultOptions = {
  when: true,
  eventTypes: ["keydown"]
};
/**
 * useKey hook
 *
 * Fires a callback on keyboard events like keyDown, keyPress and keyUp
 *
 * @param {[string|number]} keyList
 * @param {function} callback
 * @param {Options} options
 */

function useKey(input, callback, opts) {
  var keyList = useMemo(() => Array.isArray(input) ? input : [input], [input]);
  var options = Object.assign({}, defaultOptions, opts);
  var {
    when,
    eventTypes
  } = options;
  var callbackRef = useRef(callback);
  var {
    target
  } = options;
  useEffect(() => {
    callbackRef.current = callback;
  });
  var handle = useCallback(e => {
    if (keyList.some(k => e.key === k || e.code === k)) {
      callbackRef.current(e);
    }
  }, [keyList]);
  useEffect(() => {
    if (when && typeof window !== "undefined") {
      var targetNode = target ? target["current"] : window;
      eventTypes.forEach(eventType => {
        targetNode && targetNode.addEventListener(eventType, handle);
      });
      return () => {
        eventTypes.forEach(eventType => {
          targetNode && targetNode.removeEventListener(eventType, handle);
        });
      };
    }
  }, [when, eventTypes, keyList, target, callback]);
}

export { useKey };
//# sourceMappingURL=use-key.js.map