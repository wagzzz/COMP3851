{"version":3,"sources":["../../../src/lib/fuzzy-match-utils.tsx"],"names":["filterOptions","options","filter","substitutions","cleanFilter","cleanUpText","label","value","map","option","score","typeaheadSimilarity","pair","length","sort","a","b","aLength","bLength","table","indexOf","x","y","Math","max","input","toUpperCase","replace","safeSubstitutions","Object","keys","reduce","output","substitution","unsubbed","RegExp"],"mappings":"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","sourcesContent":["import { Option } from \"./interfaces\";\n\n/**\n * A collection of string matching algorithms built with React Select in mind.\n */\n\n// Option type from React Select and similar libraries.\ntype MapOfStrings = { [key: string]: string };\n\n/**\n * Filters React Select options and sorts by similarity to a search filter.\n * Handles partial matches, eg. searching for \"Waberg High\" will find \"Raoul\n * Wallenberg Traditional High School\". Case insensitive. Ignores\n * non-alphanumeric characters.\n *\n * @param  options  An unfiltered list of Options.\n * @param? filter  A string to compare against Option labels.\n * @param? substitutions  Strings with multiple spellings or variations that we\n *           expect to match, eg. accented characters or abbreviated words.\n *\n * @return A filtered and sorted array of Options.\n */\nexport function filterOptions(\n  options: Option[],\n  filter?: string,\n  substitutions?: MapOfStrings\n): Option[] {\n  // If the filter is blank, return the full list of Options.\n  if (!filter) {\n    return options;\n  }\n\n  const cleanFilter = cleanUpText(filter, substitutions);\n  return (\n    options\n      // Filter out undefined or null Options.\n      .filter(({ label, value }) => label != null && value != null)\n      // Create a {score, Option} pair for each Option based on its label's\n      // similarity to the filter text.\n      .map((option) => ({\n        option: option,\n        score: typeaheadSimilarity(\n          cleanUpText(option.label, substitutions),\n          cleanFilter\n        ),\n      }))\n      // Only include matches of the entire substring, with a slight\n      // affordance for transposition or extra characters.\n      .filter((pair) => pair.score >= cleanFilter.length - 2)\n      // Sort 'em by order of their score.\n      .sort((a, b) => b.score - a.score)\n      // …and grab the original Options back from their pairs.\n      .map((pair) => pair.option)\n  );\n}\n\n/**\n * Scores the similarity between two strings by returning the length of the\n * longest common subsequence. Intended for comparing strings of different\n * lengths; eg. when matching a typeahead search input with a school name.\n\n * Meant for use in an instant search box where results are being fetched\n * as a user is typing.\n *\n * @param  a  The longer string (though, we flip them if it's shorter).\n * @param  b  The shorter string, eg. a typeahead search input.\n *\n * @return The length of the longest common subsequence. Higher scores indicate\n *           closer matches.\n */\nexport function typeaheadSimilarity(a: string, b: string): number {\n  const aLength = a.length;\n  const bLength = b.length;\n  const table: any[] = [];\n\n  if (!aLength || !bLength) {\n    return 0;\n  }\n\n  // Ensure `a` isn't shorter than `b`.\n  if (aLength < bLength) {\n    [a, b] = [b, a];\n  }\n\n  // Early exit if `a` includes `b`; these will be scored higher than any\n  // other options with the same `b` (filter string), with a preference for\n  // shorter `a` strings (option labels).\n  if (a.indexOf(b) !== -1) {\n    return bLength + 1 / aLength;\n  }\n\n  // Initialize the table axes:\n  //\n  //    0 0 0 0 ... bLength\n  //    0\n  //    0\n  //\n  //   ...\n  //\n  // aLength\n  //\n  for (let x = 0; x <= aLength; ++x) {\n    table[x] = [0];\n  }\n  for (let y = 0; y <= bLength; ++y) {\n    table[0][y] = 0;\n  }\n\n  // Populate the rest of the table with a dynamic programming algorithm.\n  for (let x = 1; x <= aLength; ++x) {\n    for (let y = 1; y <= bLength; ++y) {\n      table[x][y] =\n        a[x - 1] === b[y - 1]\n          ? 1 + table[x - 1][y - 1]\n          : Math.max(table[x][y - 1], table[x - 1][y]);\n    }\n  }\n\n  return table[aLength][bLength];\n}\n\n/**\n * Apply string substitutions, remove non-alphanumeric characters, and convert\n * all letters to uppercase.\n *\n * eg. 'Scoil Bhríde Primary School' may become 'SCOILBHRIDEPRIMARYSCHOOL'.\n *\n * @param  input  An unsanitized input string.\n * @param  substitutions  Strings with multiple spellings or variations that we\n *          expect to match, for example accented characters or abbreviated\n *          words.\n *\n * @return The sanitized text.\n */\nexport function cleanUpText(\n  input?: string,\n  substitutions?: MapOfStrings\n): string {\n  if (!input) {\n    return \"\";\n  }\n\n  // Uppercase and remove all non-alphanumeric, non-accented characters.\n  // Also remove underscores.\n  input = input.toUpperCase().replace(/((?=[^\\u00E0-\\u00FC])\\W)|_/g, \"\");\n\n  if (!substitutions) {\n    return input;\n  }\n  const safeSubstitutions: MapOfStrings = substitutions; // For Flow.\n\n  // Replace all strings in `safeSubstitutions` with their standardized\n  // counterparts.\n  return Object.keys(safeSubstitutions).reduce((output, substitution) => {\n    const unsubbed = new RegExp(substitution, \"g\");\n    return output.replace(unsubbed, safeSubstitutions[substitution]);\n  }, input);\n}\n"],"file":"fuzzy-match-utils.js"}