{"version":3,"sources":["../../../src/select-panel/select-item.tsx"],"names":["React","useRef","useKey","KEY","DefaultItemRenderer","SelectItem","itemRenderer","ItemRenderer","option","checked","tabIndex","disabled","onSelectionChanged","onClick","itemRef","onOptionCheck","e","toggleChecked","preventDefault","handleClick","ENTER","SPACE","target"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA,OAAOC,mBAAP,MAAgC,gBAAhC;;AAYA,IAAMC,UAAU,GAAG,QAQK;AAAA,MARJ;AAClBC,IAAAA,YAAY,EAAEC,YAAY,GAAGH,mBADX;AAElBI,IAAAA,MAFkB;AAGlBC,IAAAA,OAHkB;AAIlBC,IAAAA,QAJkB;AAKlBC,IAAAA,QALkB;AAMlBC,IAAAA,kBANkB;AAOlBC,IAAAA;AAPkB,GAQI;AACtB,MAAMC,OAAY,GAAGb,MAAM,EAA3B;;AAEA,MAAMc,aAAa,GAAIC,CAAD,IAAO;AAC3BC,IAAAA,aAAa;AACbD,IAAAA,CAAC,CAACE,cAAF;AACD,GAHD;;AAKA,MAAMD,aAAa,GAAG,MAAM;AAC1B,QAAI,CAACN,QAAL,EAAe;AACbC,MAAAA,kBAAkB,CAAC,CAACH,OAAF,CAAlB;AACD;AACF,GAJD;;AAMA,MAAMU,WAAW,GAAIH,CAAD,IAAO;AACzBC,IAAAA,aAAa;AACbJ,IAAAA,OAAO,CAACG,CAAD,CAAP;AACD,GAHD;;AAKAd,EAAAA,MAAM,CAAC,CAACC,GAAG,CAACiB,KAAL,EAAYjB,GAAG,CAACkB,KAAhB,CAAD,EAAyBN,aAAzB,EAAwC;AAAEO,IAAAA,MAAM,EAAER;AAAV,GAAxC,CAAN;AAEA,sBACE;AACE,IAAA,SAAS,oBAAiBL,OAAO,IAAI,UAA5B,CADX;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,qBAAeA,OAHjB;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAKE,IAAA,GAAG,EAAEI;AALP,kBAOE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEN,MADV;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,OAAO,EAAEU,WAHX;AAIE,IAAA,QAAQ,EAAER;AAJZ,IAPF,CADF;AAgBD,CA7CD;;AA+CA,eAAeN,UAAf","sourcesContent":["/**\n * This component represents an individual item in the multi-select drop-down\n */\nimport React, { useRef } from \"react\";\n\nimport { useKey } from \"../hooks/use-key\";\nimport { KEY } from \"../lib/constants\";\nimport { Option } from \"../lib/interfaces\";\nimport DefaultItemRenderer from \"./default-item\";\n\ninterface ISelectItemProps {\n  itemRenderer;\n  option: Option;\n  checked?: boolean;\n  tabIndex?: number;\n  disabled?: boolean;\n  onSelectionChanged: (checked: boolean) => void;\n  onClick;\n}\n\nconst SelectItem = ({\n  itemRenderer: ItemRenderer = DefaultItemRenderer,\n  option,\n  checked,\n  tabIndex,\n  disabled,\n  onSelectionChanged,\n  onClick,\n}: ISelectItemProps) => {\n  const itemRef: any = useRef();\n\n  const onOptionCheck = (e) => {\n    toggleChecked();\n    e.preventDefault();\n  };\n\n  const toggleChecked = () => {\n    if (!disabled) {\n      onSelectionChanged(!checked);\n    }\n  };\n\n  const handleClick = (e) => {\n    toggleChecked();\n    onClick(e);\n  };\n\n  useKey([KEY.ENTER, KEY.SPACE], onOptionCheck, { target: itemRef });\n\n  return (\n    <label\n      className={`select-item ${checked && \"selected\"}`}\n      role=\"option\"\n      aria-selected={checked}\n      tabIndex={tabIndex}\n      ref={itemRef}\n    >\n      <ItemRenderer\n        option={option}\n        checked={checked}\n        onClick={handleClick}\n        disabled={disabled}\n      />\n    </label>\n  );\n};\n\nexport default SelectItem;\n"],"file":"select-item.js"}