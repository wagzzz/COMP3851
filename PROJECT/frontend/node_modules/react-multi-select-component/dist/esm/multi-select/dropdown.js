/**
 * A generic dropdown component.  It takes the children of the component
 * and hosts it in the component.  When the component is selected, it
 * drops-down the contentComponent and applies the contentProps.
 */
import React, { useEffect, useRef, useState } from "react";
import { useDidUpdateEffect } from "../hooks/use-did-update-effect";
import { useKey } from "../hooks/use-key";
import { useMultiSelect } from "../hooks/use-multi-select";
import { KEY } from "../lib/constants";
import SelectPanel from "../select-panel";
import { Cross } from "../select-panel/cross";
import { Arrow } from "./arrow";
import { DropdownHeader } from "./header";
import { Loading } from "./loading";

var Dropdown = () => {
  var {
    t,
    onMenuToggle,
    ArrowRenderer,
    shouldToggleOnHover,
    isLoading,
    disabled,
    onChange,
    labelledBy,
    value,
    isOpen,
    defaultIsOpen,
    ClearSelectedIcon
  } = useMultiSelect();
  var [isInternalExpand, setIsInternalExpand] = useState(true);
  var [expanded, setExpanded] = useState(defaultIsOpen);
  var [hasFocus, setHasFocus] = useState(false);
  var FinalArrow = ArrowRenderer || Arrow;
  var wrapper = useRef();
  useDidUpdateEffect(() => {
    onMenuToggle && onMenuToggle(expanded);
  }, [expanded]);
  useEffect(() => {
    if (defaultIsOpen === undefined && typeof isOpen === "boolean") {
      setIsInternalExpand(false);
      setExpanded(isOpen);
    }
  }, [isOpen]);

  var handleKeyDown = e => {
    // allows space and enter when focused on input/button
    if (["text", "button"].includes(e.target.type) && [KEY.SPACE, KEY.ENTER].includes(e.code)) {
      return;
    }

    if (isInternalExpand) {
      if (e.code === KEY.ESCAPE) {
        var _wrapper$current;

        setExpanded(false);
        wrapper == null ? void 0 : (_wrapper$current = wrapper.current) == null ? void 0 : _wrapper$current.focus();
      } else {
        setExpanded(true);
      }
    }

    e.preventDefault();
  };

  useKey([KEY.ENTER, KEY.ARROW_DOWN, KEY.SPACE, KEY.ESCAPE], handleKeyDown, {
    target: wrapper
  });

  var handleHover = iexpanded => {
    isInternalExpand && shouldToggleOnHover && setExpanded(iexpanded);
  };

  var handleFocus = () => !hasFocus && setHasFocus(true);

  var handleBlur = e => {
    if (!e.currentTarget.contains(e.relatedTarget) && isInternalExpand) {
      setHasFocus(false);
      setExpanded(false);
    }
  };

  var handleMouseEnter = () => handleHover(true);

  var handleMouseLeave = () => handleHover(false);

  var toggleExpanded = () => {
    isInternalExpand && setExpanded(isLoading || disabled ? false : !expanded);
  };

  var handleClearSelected = e => {
    e.stopPropagation();
    onChange([]);
    isInternalExpand && setExpanded(false);
  };

  return /*#__PURE__*/React.createElement("div", {
    tabIndex: 0,
    className: "dropdown-container",
    "aria-labelledby": labelledBy,
    "aria-expanded": expanded,
    "aria-readonly": true,
    "aria-disabled": disabled,
    ref: wrapper,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/React.createElement("div", {
    className: "dropdown-heading",
    onClick: toggleExpanded
  }, /*#__PURE__*/React.createElement("div", {
    className: "dropdown-heading-value"
  }, /*#__PURE__*/React.createElement(DropdownHeader, null)), isLoading && /*#__PURE__*/React.createElement(Loading, null), value.length > 0 && /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: "clear-selected-button",
    onClick: handleClearSelected,
    disabled: disabled,
    "aria-label": t("clearSelected")
  }, ClearSelectedIcon || /*#__PURE__*/React.createElement(Cross, null)), /*#__PURE__*/React.createElement(FinalArrow, {
    expanded: expanded
  })), expanded && /*#__PURE__*/React.createElement("div", {
    className: "dropdown-content"
  }, /*#__PURE__*/React.createElement("div", {
    className: "panel-content"
  }, /*#__PURE__*/React.createElement(SelectPanel, null))));
};

export default Dropdown;
//# sourceMappingURL=dropdown.js.map