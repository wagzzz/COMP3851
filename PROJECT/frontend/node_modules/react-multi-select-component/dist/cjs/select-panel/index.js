"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useKey = require("../hooks/use-key");

var _useMultiSelect = require("../hooks/use-multi-select");

var _constants = require("../lib/constants");

var _debounce = require("../lib/debounce");

var _fuzzyMatchUtils = require("../lib/fuzzy-match-utils");

var _cross = require("./cross");

var _selectItem = _interopRequireDefault(require("./select-item"));

var _selectList = _interopRequireDefault(require("./select-list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * This component represents the entire panel which gets dropped down when the
 * user selects the component.  It encapsulates the search filter, the
 * Select-all item, and the list of options.
 */
var FocusType;

(function (FocusType) {
  FocusType[FocusType["SEARCH"] = 0] = "SEARCH";
  FocusType[FocusType["NONE"] = -1] = "NONE";
})(FocusType || (FocusType = {}));

const SelectPanel = () => {
  const {
    t,
    onChange,
    options,
    setOptions,
    value,
    filterOptions: customFilterOptions,
    ItemRenderer,
    disabled,
    disableSearch,
    hasSelectAll,
    ClearIcon,
    debounceDuration,
    isCreatable,
    onCreateOption
  } = (0, _useMultiSelect.useMultiSelect)();
  const listRef = (0, _react.useRef)();
  const searchInputRef = (0, _react.useRef)();
  const [searchText, setSearchText] = (0, _react.useState)("");
  const [filteredOptions, setFilteredOptions] = (0, _react.useState)(options);
  const [searchTextForFilter, setSearchTextForFilter] = (0, _react.useState)("");
  const [focusIndex, setFocusIndex] = (0, _react.useState)(0);
  const debouncedSearch = (0, _react.useCallback)((0, _debounce.debounce)(query => setSearchTextForFilter(query), debounceDuration), []);
  const skipIndex = (0, _react.useMemo)(() => {
    let start = 0;
    if (!disableSearch) start += 1; // if search is enabled then +1 to skipIndex

    if (hasSelectAll) start += 1; // if select-all is enabled then +1 to skipIndex

    return start;
  }, [disableSearch, hasSelectAll]);
  const selectAllOption = {
    label: searchText ? t("selectAllFiltered") : t("selectAll"),
    value: ""
  };

  const selectAllValues = checked => {
    const filteredValues = filteredOptions.filter(o => !o.disabled).map(o => o.value);

    if (checked) {
      const selectedValues = value.map(o => o.value);
      const finalSelectedValues = [...selectedValues, ...filteredValues];
      return options.filter(o => finalSelectedValues.includes(o.value));
    }

    return value.filter(o => !filteredValues.includes(o.value));
  };

  const selectAllChanged = checked => {
    const newOptions = selectAllValues(checked);
    onChange(newOptions);
  };

  const handleSearchChange = e => {
    debouncedSearch(e.target.value);
    setSearchText(e.target.value);
    setFocusIndex(FocusType.SEARCH);
  };

  const handleClear = () => {
    var _searchInputRef$curre;

    setSearchTextForFilter("");
    setSearchText("");
    searchInputRef == null ? void 0 : (_searchInputRef$curre = searchInputRef.current) == null ? void 0 : _searchInputRef$curre.focus();
  };

  const handleItemClicked = index => setFocusIndex(index); // Arrow Key Navigation


  const handleKeyDown = e => {
    switch (e.code) {
      case _constants.KEY.ARROW_UP:
        updateFocus(-1);
        break;

      case _constants.KEY.ARROW_DOWN:
        updateFocus(1);
        break;

      default:
        return;
    }

    e.stopPropagation();
    e.preventDefault();
  };

  (0, _useKey.useKey)([_constants.KEY.ARROW_DOWN, _constants.KEY.ARROW_UP], handleKeyDown, {
    target: listRef
  });

  const handleSearchFocus = () => {
    setFocusIndex(FocusType.SEARCH);
  };

  const handleOnCreateOption = async () => {
    let newOption = {
      label: searchText,
      value: searchText,
      __isNew__: true
    }; // if custom `onCreateOption` is given then this will call this

    if (onCreateOption) {
      newOption = await onCreateOption(searchText);
    } // adds created value to existing options


    setOptions([newOption, ...options]);
    handleClear();
    onChange([...value, newOption]);
  };

  const getFilteredOptions = async () => customFilterOptions ? await customFilterOptions(options, searchTextForFilter) : (0, _fuzzyMatchUtils.filterOptions)(options, searchTextForFilter);

  const updateFocus = offset => {
    let newFocus = focusIndex + offset;
    newFocus = Math.max(0, newFocus);
    newFocus = Math.min(newFocus, options.length + Math.max(skipIndex - 1, 0));
    setFocusIndex(newFocus);
  };

  (0, _react.useEffect)(() => {
    var _listRef$current, _listRef$current$quer;

    listRef == null ? void 0 : (_listRef$current = listRef.current) == null ? void 0 : (_listRef$current$quer = _listRef$current.querySelector(`[tabIndex='${focusIndex}']`)) == null ? void 0 : _listRef$current$quer.focus();
  }, [focusIndex]);
  const [isAllOptionSelected, hasSelectableOptions] = (0, _react.useMemo)(() => {
    const filteredOptionsList = filteredOptions.filter(o => !o.disabled);
    return [filteredOptionsList.every(o => value.findIndex(v => v.value === o.value) !== -1), filteredOptionsList.length !== 0]; // eslint-disable-next-line
  }, [filteredOptions, value]);
  (0, _react.useEffect)(() => {
    getFilteredOptions().then(setFilteredOptions);
  }, [searchTextForFilter, options]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "select-panel",
    role: "listbox",
    ref: listRef
  }, !disableSearch && /*#__PURE__*/_react.default.createElement("div", {
    className: "search"
  }, /*#__PURE__*/_react.default.createElement("input", {
    placeholder: t("search"),
    type: "text",
    "aria-describedby": t("search"),
    onChange: handleSearchChange,
    onFocus: handleSearchFocus,
    value: searchText,
    ref: searchInputRef,
    tabIndex: 0
  }), /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    className: "search-clear-button",
    hidden: !searchText,
    onClick: handleClear,
    "aria-label": t("clearSearch")
  }, ClearIcon || /*#__PURE__*/_react.default.createElement(_cross.Cross, null))), /*#__PURE__*/_react.default.createElement("ul", {
    className: "options"
  }, hasSelectAll && hasSelectableOptions && /*#__PURE__*/_react.default.createElement(_selectItem.default, {
    tabIndex: skipIndex === 1 ? 0 : 1,
    checked: isAllOptionSelected,
    option: selectAllOption,
    onSelectionChanged: selectAllChanged,
    onClick: () => handleItemClicked(1),
    itemRenderer: ItemRenderer,
    disabled: disabled
  }), filteredOptions.length ? /*#__PURE__*/_react.default.createElement(_selectList.default, {
    skipIndex: skipIndex,
    options: filteredOptions,
    onClick: (_e, index) => handleItemClicked(index)
  }) : isCreatable ? /*#__PURE__*/_react.default.createElement("li", {
    onClick: handleOnCreateOption,
    className: "select-item creatable"
  }, `${t("create")} "${searchText}"`) : /*#__PURE__*/_react.default.createElement("li", {
    className: "no-options"
  }, t("noOptions"))));
};

var _default = SelectPanel;
exports.default = _default;
//# sourceMappingURL=index.js.map