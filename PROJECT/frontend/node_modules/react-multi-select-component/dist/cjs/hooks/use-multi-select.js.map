{"version":3,"sources":["../../../src/hooks/use-multi-select.tsx"],"names":["defaultStrings","allItemsAreSelected","clearSearch","clearSelected","noOptions","search","selectAll","selectAllFiltered","selectSomeItems","create","defaultProps","value","hasSelectAll","className","debounceDuration","options","MultiSelectContext","React","createContext","MultiSelectProvider","props","children","setOptions","t","key","overrideStrings","useMultiSelect","useContext"],"mappings":";;;;;AAAA;;AAEA;;;;;;AAGA,MAAMA,cAAc,GAAG;AACrBC,EAAAA,mBAAmB,EAAE,yBADA;AAErBC,EAAAA,WAAW,EAAE,cAFQ;AAGrBC,EAAAA,aAAa,EAAE,gBAHM;AAIrBC,EAAAA,SAAS,EAAE,YAJU;AAKrBC,EAAAA,MAAM,EAAE,QALa;AAMrBC,EAAAA,SAAS,EAAE,YANU;AAOrBC,EAAAA,iBAAiB,EAAE,uBAPE;AAQrBC,EAAAA,eAAe,EAAE,WARI;AASrBC,EAAAA,MAAM,EAAE;AATa,CAAvB;AAYA,MAAMC,YAAmC,GAAG;AAC1CC,EAAAA,KAAK,EAAE,EADmC;AAE1CC,EAAAA,YAAY,EAAE,IAF4B;AAG1CC,EAAAA,SAAS,EAAE,cAH+B;AAI1CC,EAAAA,gBAAgB,EAAE,GAJwB;AAK1CC,EAAAA,OAAO,EAAE;AALiC,CAA5C;;AAkBA,MAAMC,kBAAkB,gBAAGC,eAAMC,aAAN,CACzB,EADyB,CAA3B;;AAIO,MAAMC,mBAAmB,GAAG,CAAC;AAClCC,EAAAA,KADkC;AAElCC,EAAAA;AAFkC,CAAD,KAGH;AAC9B,QAAM,CAACN,OAAD,EAAUO,UAAV,IAAwB,qBAASF,KAAK,CAACL,OAAf,CAA9B;;AACA,QAAMQ,CAAC,GAAIC,GAAD;AAAA;;AAAA,WAAS,0BAAAJ,KAAK,CAACK,eAAN,2CAAwBD,GAAxB,MAAgCxB,cAAc,CAACwB,GAAD,CAAvD;AAAA,GAAV;;AAEA,sBAAQ,MAAM,gCAAd,EAA8B,EAA9B;AAEA,wBAAU,MAAM;AACdF,IAAAA,UAAU,CAACF,KAAK,CAACL,OAAP,CAAV;AACD,GAFD,EAEG,CAACK,KAAK,CAACL,OAAP,CAFH;AAIA,sBACE,6BAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,CAAF;AAAK,SAAGb,YAAR;AAAsB,SAAGU,KAAzB;AAAgCL,MAAAA,OAAhC;AAAyCO,MAAAA;AAAzC;AADT,KAGGD,QAHH,CADF;AAOD,CApBM;;;;AAsBA,MAAMK,cAAc,GAAG,MAAMT,eAAMU,UAAN,CAAiBX,kBAAjB,CAA7B","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\n\nimport { injectStyles } from \"../lib/inject-style\";\nimport { ISelectProps, Option } from \"../lib/interfaces\";\n\nconst defaultStrings = {\n  allItemsAreSelected: \"All items are selected.\",\n  clearSearch: \"Clear Search\",\n  clearSelected: \"Clear Selected\",\n  noOptions: \"No options\",\n  search: \"Search\",\n  selectAll: \"Select All\",\n  selectAllFiltered: \"Select All (Filtered)\",\n  selectSomeItems: \"Select...\",\n  create: \"Create\",\n};\n\nconst defaultProps: Partial<ISelectProps> = {\n  value: [],\n  hasSelectAll: true,\n  className: \"multi-select\",\n  debounceDuration: 200,\n  options: [] as Option[],\n};\n\ninterface MultiSelectContextProps extends ISelectProps {\n  t: (key: string) => string;\n  setOptions?;\n}\n\ninterface MultiSelectProviderProps {\n  props: ISelectProps;\n  children;\n}\n\nconst MultiSelectContext = React.createContext<MultiSelectContextProps>(\n  {} as MultiSelectContextProps\n);\n\nexport const MultiSelectProvider = ({\n  props,\n  children,\n}: MultiSelectProviderProps) => {\n  const [options, setOptions] = useState(props.options);\n  const t = (key) => props.overrideStrings?.[key] || defaultStrings[key];\n\n  useMemo(() => injectStyles(), []);\n\n  useEffect(() => {\n    setOptions(props.options);\n  }, [props.options]);\n\n  return (\n    <MultiSelectContext.Provider\n      value={{ t, ...defaultProps, ...props, options, setOptions }}\n    >\n      {children}\n    </MultiSelectContext.Provider>\n  );\n};\n\nexport const useMultiSelect = () => React.useContext(MultiSelectContext);\n"],"file":"use-multi-select.js"}