"use strict";

exports.__esModule = true;
exports.useMultiSelect = exports.MultiSelectProvider = void 0;

var _react = _interopRequireWildcard(require("react"));

var _injectStyle = require("../lib/inject-style");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultStrings = {
  allItemsAreSelected: "All items are selected.",
  clearSearch: "Clear Search",
  clearSelected: "Clear Selected",
  noOptions: "No options",
  search: "Search",
  selectAll: "Select All",
  selectAllFiltered: "Select All (Filtered)",
  selectSomeItems: "Select...",
  create: "Create"
};
const defaultProps = {
  value: [],
  hasSelectAll: true,
  className: "multi-select",
  debounceDuration: 200,
  options: []
};

const MultiSelectContext = /*#__PURE__*/_react.default.createContext({});

const MultiSelectProvider = ({
  props,
  children
}) => {
  const [options, setOptions] = (0, _react.useState)(props.options);

  const t = key => {
    var _props$overrideString;

    return ((_props$overrideString = props.overrideStrings) == null ? void 0 : _props$overrideString[key]) || defaultStrings[key];
  };

  (0, _react.useMemo)(() => (0, _injectStyle.injectStyles)(), []);
  (0, _react.useEffect)(() => {
    setOptions(props.options);
  }, [props.options]);
  return /*#__PURE__*/_react.default.createElement(MultiSelectContext.Provider, {
    value: {
      t,
      ...defaultProps,
      ...props,
      options,
      setOptions
    }
  }, children);
};

exports.MultiSelectProvider = MultiSelectProvider;

const useMultiSelect = () => _react.default.useContext(MultiSelectContext);

exports.useMultiSelect = useMultiSelect;
//# sourceMappingURL=use-multi-select.js.map