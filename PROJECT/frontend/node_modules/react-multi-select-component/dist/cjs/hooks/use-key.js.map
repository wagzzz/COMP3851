{"version":3,"sources":["../../../src/hooks/use-key.tsx"],"names":["defaultOptions","when","eventTypes","useKey","input","callback","opts","keyList","Array","isArray","options","Object","assign","callbackRef","target","current","handle","e","some","k","key","code","window","targetNode","forEach","eventType","addEventListener","removeEventListener"],"mappings":";;;;;AAGA;;AAHA;AACA;AACA;AAmBA,MAAMA,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,IADe;AAErBC,EAAAA,UAAU,EAAE,CAAC,SAAD;AAFS,CAAvB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CACEC,KADF,EAEEC,QAFF,EAGEC,IAHF,EAIQ;AACN,QAAMC,OAA+B,GAAG,oBACtC,MAAOC,KAAK,CAACC,OAAN,CAAcL,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CADA,EAEtC,CAACA,KAAD,CAFsC,CAAxC;AAIA,QAAMM,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,cAAlB,EAAkCM,IAAlC,CAAhB;AACA,QAAM;AAAEL,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAuBQ,OAA7B;AACA,QAAMG,WAAW,GAAG,mBAAkCR,QAAlC,CAApB;AACA,QAAM;AAAES,IAAAA;AAAF,MAAaJ,OAAnB;AAEA,wBAAU,MAAM;AACdG,IAAAA,WAAW,CAACE,OAAZ,GAAsBV,QAAtB;AACD,GAFD;AAIA,QAAMW,MAAM,GAAG,wBACZC,CAAD,IAAsB;AACpB,QAAIV,OAAO,CAACW,IAAR,CAAcC,CAAD,IAAOF,CAAC,CAACG,GAAF,KAAUD,CAAV,IAAeF,CAAC,CAACI,IAAF,KAAWF,CAA9C,CAAJ,EAAsD;AACpDN,MAAAA,WAAW,CAACE,OAAZ,CAAoBE,CAApB;AACD;AACF,GALY,EAMb,CAACV,OAAD,CANa,CAAf;AASA,wBAAU,MAAW;AACnB,QAAIN,IAAI,IAAI,OAAOqB,MAAP,KAAkB,WAA9B,EAA2C;AACzC,YAAMC,UAAU,GAAGT,MAAM,GAAGA,MAAM,CAAC,SAAD,CAAT,GAAuBQ,MAAhD;AACApB,MAAAA,UAAU,CAACsB,OAAX,CAAoBC,SAAD,IAAe;AAChCF,QAAAA,UAAU,IAAIA,UAAU,CAACG,gBAAX,CAA4BD,SAA5B,EAAuCT,MAAvC,CAAd;AACD,OAFD;AAGA,aAAO,MAAM;AACXd,QAAAA,UAAU,CAACsB,OAAX,CAAoBC,SAAD,IAAe;AAChCF,UAAAA,UAAU,IAAIA,UAAU,CAACI,mBAAX,CAA+BF,SAA/B,EAA0CT,MAA1C,CAAd;AACD,SAFD;AAGD,OAJD;AAKD;AACF,GAZD,EAYG,CAACf,IAAD,EAAOC,UAAP,EAAmBK,OAAnB,EAA4BO,MAA5B,EAAoCT,QAApC,CAZH;AAaD","sourcesContent":["/*\n * copied from https://github.com/imbhargav5/rooks/blob/master/packages/shared/useKeyRef.ts\n */\nimport { Ref, useCallback, useEffect, useMemo, useRef } from \"react\";\n\ninterface Options {\n  /**\n   * Condition which if true, will enable the event listeners\n   */\n  when?: boolean;\n  /**\n   * Keyboardevent types to listen for. Valid options are keyDown, keyPress and keyUp\n   */\n  eventTypes?: Array<string | number>;\n  /**\n   * target ref on which the events should be listened. If no target is specified,\n   * events are listened to on the window\n   */\n  target?: Ref<HTMLElement> | null;\n}\n\nconst defaultOptions = {\n  when: true,\n  eventTypes: [\"keydown\"],\n};\n\n/**\n * useKey hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keyList\n * @param {function} callback\n * @param {Options} options\n */\nfunction useKey(\n  input: string | number | Array<string | number>,\n  callback: (e: KeyboardEvent) => any,\n  opts?: Options\n): void {\n  const keyList: Array<string | number> = useMemo(\n    () => (Array.isArray(input) ? input : [input]),\n    [input]\n  );\n  const options = Object.assign({}, defaultOptions, opts);\n  const { when, eventTypes } = options;\n  const callbackRef = useRef<(e: KeyboardEvent) => any>(callback);\n  const { target } = options;\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  const handle = useCallback(\n    (e: KeyboardEvent) => {\n      if (keyList.some((k) => e.key === k || e.code === k)) {\n        callbackRef.current(e);\n      }\n    },\n    [keyList]\n  );\n\n  useEffect((): any => {\n    if (when && typeof window !== \"undefined\") {\n      const targetNode = target ? target[\"current\"] : window;\n      eventTypes.forEach((eventType) => {\n        targetNode && targetNode.addEventListener(eventType, handle);\n      });\n      return () => {\n        eventTypes.forEach((eventType) => {\n          targetNode && targetNode.removeEventListener(eventType, handle);\n        });\n      };\n    }\n  }, [when, eventTypes, keyList, target, callback]);\n}\n\nexport { useKey };\n"],"file":"use-key.js"}