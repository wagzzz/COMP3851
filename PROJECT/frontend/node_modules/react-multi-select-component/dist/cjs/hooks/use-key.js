"use strict";

exports.__esModule = true;
exports.useKey = useKey;

var _react = require("react");

/*
 * copied from https://github.com/imbhargav5/rooks/blob/master/packages/shared/useKeyRef.ts
 */
const defaultOptions = {
  when: true,
  eventTypes: ["keydown"]
};
/**
 * useKey hook
 *
 * Fires a callback on keyboard events like keyDown, keyPress and keyUp
 *
 * @param {[string|number]} keyList
 * @param {function} callback
 * @param {Options} options
 */

function useKey(input, callback, opts) {
  const keyList = (0, _react.useMemo)(() => Array.isArray(input) ? input : [input], [input]);
  const options = Object.assign({}, defaultOptions, opts);
  const {
    when,
    eventTypes
  } = options;
  const callbackRef = (0, _react.useRef)(callback);
  const {
    target
  } = options;
  (0, _react.useEffect)(() => {
    callbackRef.current = callback;
  });
  const handle = (0, _react.useCallback)(e => {
    if (keyList.some(k => e.key === k || e.code === k)) {
      callbackRef.current(e);
    }
  }, [keyList]);
  (0, _react.useEffect)(() => {
    if (when && typeof window !== "undefined") {
      const targetNode = target ? target["current"] : window;
      eventTypes.forEach(eventType => {
        targetNode && targetNode.addEventListener(eventType, handle);
      });
      return () => {
        eventTypes.forEach(eventType => {
          targetNode && targetNode.removeEventListener(eventType, handle);
        });
      };
    }
  }, [when, eventTypes, keyList, target, callback]);
}
//# sourceMappingURL=use-key.js.map