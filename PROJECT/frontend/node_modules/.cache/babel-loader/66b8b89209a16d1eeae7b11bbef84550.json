{"ast":null,"code":"/**\n * A generic dropdown component.  It takes the children of the component\n * and hosts it in the component.  When the component is selected, it\n * drops-down the contentComponent and applies the contentProps.\n */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDidUpdateEffect } from \"../hooks/use-did-update-effect\";\nimport { useKey } from \"../hooks/use-key\";\nimport { useMultiSelect } from \"../hooks/use-multi-select\";\nimport { KEY } from \"../lib/constants\";\nimport SelectPanel from \"../select-panel\";\nimport { Cross } from \"../select-panel/cross\";\nimport { Arrow } from \"./arrow\";\nimport { DropdownHeader } from \"./header\";\nimport { Loading } from \"./loading\";\n\nvar Dropdown = () => {\n  var {\n    t,\n    onMenuToggle,\n    ArrowRenderer,\n    shouldToggleOnHover,\n    isLoading,\n    disabled,\n    onChange,\n    labelledBy,\n    value,\n    isOpen,\n    defaultIsOpen,\n    ClearSelectedIcon\n  } = useMultiSelect();\n  var [isInternalExpand, setIsInternalExpand] = useState(true);\n  var [expanded, setExpanded] = useState(defaultIsOpen);\n  var [hasFocus, setHasFocus] = useState(false);\n  var FinalArrow = ArrowRenderer || Arrow;\n  var wrapper = useRef();\n  useDidUpdateEffect(() => {\n    onMenuToggle && onMenuToggle(expanded);\n  }, [expanded]);\n  useEffect(() => {\n    if (defaultIsOpen === undefined && typeof isOpen === \"boolean\") {\n      setIsInternalExpand(false);\n      setExpanded(isOpen);\n    }\n  }, [isOpen]);\n\n  var handleKeyDown = e => {\n    // allows space and enter when focused on input/button\n    if ([\"text\", \"button\"].includes(e.target.type) && [KEY.SPACE, KEY.ENTER].includes(e.code)) {\n      return;\n    }\n\n    if (isInternalExpand) {\n      if (e.code === KEY.ESCAPE) {\n        var _wrapper$current;\n\n        setExpanded(false);\n        wrapper == null ? void 0 : (_wrapper$current = wrapper.current) == null ? void 0 : _wrapper$current.focus();\n      } else {\n        setExpanded(true);\n      }\n    }\n\n    e.preventDefault();\n  };\n\n  useKey([KEY.ENTER, KEY.ARROW_DOWN, KEY.SPACE, KEY.ESCAPE], handleKeyDown, {\n    target: wrapper\n  });\n\n  var handleHover = iexpanded => {\n    isInternalExpand && shouldToggleOnHover && setExpanded(iexpanded);\n  };\n\n  var handleFocus = () => !hasFocus && setHasFocus(true);\n\n  var handleBlur = e => {\n    if (!e.currentTarget.contains(e.relatedTarget) && isInternalExpand) {\n      setHasFocus(false);\n      setExpanded(false);\n    }\n  };\n\n  var handleMouseEnter = () => handleHover(true);\n\n  var handleMouseLeave = () => handleHover(false);\n\n  var toggleExpanded = () => {\n    isInternalExpand && setExpanded(isLoading || disabled ? false : !expanded);\n  };\n\n  var handleClearSelected = e => {\n    e.stopPropagation();\n    onChange([]);\n    isInternalExpand && setExpanded(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    className: \"dropdown-container\",\n    \"aria-labelledby\": labelledBy,\n    \"aria-expanded\": expanded,\n    \"aria-readonly\": true,\n    \"aria-disabled\": disabled,\n    ref: wrapper,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-heading\",\n    onClick: toggleExpanded\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-heading-value\"\n  }, /*#__PURE__*/React.createElement(DropdownHeader, null)), isLoading && /*#__PURE__*/React.createElement(Loading, null), value.length > 0 && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"clear-selected-button\",\n    onClick: handleClearSelected,\n    disabled: disabled,\n    \"aria-label\": t(\"clearSelected\")\n  }, ClearSelectedIcon || /*#__PURE__*/React.createElement(Cross, null)), /*#__PURE__*/React.createElement(FinalArrow, {\n    expanded: expanded\n  })), expanded && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown-content\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-content\"\n  }, /*#__PURE__*/React.createElement(SelectPanel, null))));\n};\n\nexport default Dropdown;","map":{"version":3,"sources":["../../../src/multi-select/dropdown.tsx"],"names":["Dropdown","ClearSelectedIcon","useMultiSelect","useState","FinalArrow","ArrowRenderer","wrapper","useRef","useDidUpdateEffect","onMenuToggle","useEffect","defaultIsOpen","setIsInternalExpand","setExpanded","handleKeyDown","e","KEY","useKey","target","handleHover","iexpanded","isInternalExpand","handleFocus","setHasFocus","handleBlur","handleMouseEnter","handleMouseLeave","toggleExpanded","isLoading","handleClearSelected","onChange","value","t","expanded"],"mappings":"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","sourcesContent":["/**\n * A generic dropdown component.  It takes the children of the component\n * and hosts it in the component.  When the component is selected, it\n * drops-down the contentComponent and applies the contentProps.\n */\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { useDidUpdateEffect } from \"../hooks/use-did-update-effect\";\nimport { useKey } from \"../hooks/use-key\";\nimport { useMultiSelect } from \"../hooks/use-multi-select\";\nimport { KEY } from \"../lib/constants\";\nimport SelectPanel from \"../select-panel\";\nimport { Cross } from \"../select-panel/cross\";\nimport { Arrow } from \"./arrow\";\nimport { DropdownHeader } from \"./header\";\nimport { Loading } from \"./loading\";\n\nconst Dropdown = () => {\n  const {\n    t,\n    onMenuToggle,\n    ArrowRenderer,\n    shouldToggleOnHover,\n    isLoading,\n    disabled,\n    onChange,\n    labelledBy,\n    value,\n    isOpen,\n    defaultIsOpen,\n    ClearSelectedIcon,\n  } = useMultiSelect();\n\n  const [isInternalExpand, setIsInternalExpand] = useState(true);\n  const [expanded, setExpanded] = useState(defaultIsOpen);\n  const [hasFocus, setHasFocus] = useState(false);\n  const FinalArrow = ArrowRenderer || Arrow;\n\n  const wrapper: any = useRef();\n\n  useDidUpdateEffect(() => {\n    onMenuToggle && onMenuToggle(expanded);\n  }, [expanded]);\n\n  useEffect(() => {\n    if (defaultIsOpen === undefined && typeof isOpen === \"boolean\") {\n      setIsInternalExpand(false);\n      setExpanded(isOpen);\n    }\n  }, [isOpen]);\n\n  const handleKeyDown = (e) => {\n    // allows space and enter when focused on input/button\n    if (\n      [\"text\", \"button\"].includes(e.target.type) &&\n      [KEY.SPACE, KEY.ENTER].includes(e.code)\n    ) {\n      return;\n    }\n\n    if (isInternalExpand) {\n      if (e.code === KEY.ESCAPE) {\n        setExpanded(false);\n        wrapper?.current?.focus();\n      } else {\n        setExpanded(true);\n      }\n    }\n    e.preventDefault();\n  };\n\n  useKey([KEY.ENTER, KEY.ARROW_DOWN, KEY.SPACE, KEY.ESCAPE], handleKeyDown, {\n    target: wrapper,\n  });\n\n  const handleHover = (iexpanded: boolean) => {\n    isInternalExpand && shouldToggleOnHover && setExpanded(iexpanded);\n  };\n\n  const handleFocus = () => !hasFocus && setHasFocus(true);\n\n  const handleBlur = (e) => {\n    if (!e.currentTarget.contains(e.relatedTarget) && isInternalExpand) {\n      setHasFocus(false);\n      setExpanded(false);\n    }\n  };\n\n  const handleMouseEnter = () => handleHover(true);\n\n  const handleMouseLeave = () => handleHover(false);\n\n  const toggleExpanded = () => {\n    isInternalExpand && setExpanded(isLoading || disabled ? false : !expanded);\n  };\n\n  const handleClearSelected = (e) => {\n    e.stopPropagation();\n    onChange([]);\n    isInternalExpand && setExpanded(false);\n  };\n\n  return (\n    <div\n      tabIndex={0}\n      className=\"dropdown-container\"\n      aria-labelledby={labelledBy}\n      aria-expanded={expanded}\n      aria-readonly={true}\n      aria-disabled={disabled}\n      ref={wrapper}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <div className=\"dropdown-heading\" onClick={toggleExpanded}>\n        <div className=\"dropdown-heading-value\">\n          <DropdownHeader />\n        </div>\n        {isLoading && <Loading />}\n        {value.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"clear-selected-button\"\n            onClick={handleClearSelected}\n            disabled={disabled}\n            aria-label={t(\"clearSelected\")}\n          >\n            {ClearSelectedIcon || <Cross />}\n          </button>\n        )}\n        <FinalArrow expanded={expanded} />\n      </div>\n      {expanded && (\n        <div className=\"dropdown-content\">\n          <div className=\"panel-content\">\n            <SelectPanel />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}