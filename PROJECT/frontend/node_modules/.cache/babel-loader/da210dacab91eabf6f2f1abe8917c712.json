{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\itswa\\\\Desktop\\\\Complete\\\\frontend\\\\src\\\\components\\\\User\\\\DegreePlan\\\\UserDegreePlan.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logout } from '../../../store/actions/authActions';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { Button, Container, Navbar, Row, Col, Modal, Form } from 'react-bootstrap';\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport UserCoursePlanItem from \"./UserCoursePlanItem\";\nimport DisabledCoursePlanItem from \"../../Admin/DegreePlan/DisabledCoursePlanItem\";\nimport axios from \"axios\";\nimport { config } from \"../../../constants\";\nimport YearPanel from \"../../Admin/DegreePlan/YearPanel\";\nimport SemesterPanel from \"../../Admin/DegreePlan/SemesterPanel\";\nimport { useParams } from \"react-router-dom\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { isNull } from \"../../../utils/stringUtil\";\nimport { onToast } from \"../../../utils/toastUtil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserDegreePlan = () => {\n  _s();\n\n  const dispatch = useDispatch();\n\n  const signout = () => {\n    dispatch(logout());\n  };\n\n  let {\n    degreePlanId\n  } = useParams();\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const [degreePlan, setDegreePlan] = useState({});\n  const [coursePlans, setCoursePlans] = useState([]);\n  const [coursePlan, setCoursePlan] = useState({});\n  const [restraints, setRestraints] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const [yearList, setYearList] = useState([]);\n  useEffect(() => {\n    // here goes the data fetching\n    const fetchDegreePlan = async () => {\n      try {\n        let res = await axios.get('/user/degreePlan/' + degreePlanId, config);\n\n        let _coursePlans = res.data.coursePlans.sort((a, b) => {\n          return a.sequence - b.sequence;\n        });\n\n        setDegreePlan(_coursePlans[0].degreePlan);\n        setCoursePlans(_coursePlans);\n        let _yearList = [];\n\n        for (let i = 1; i <= parseInt(_coursePlans.length + 4) / 8; i++) _yearList.push(i);\n\n        setYearList(_yearList);\n        setRestraints(res.data.restraints);\n      } catch (err) {\n        onToast('Server Error!', 'error');\n      }\n    };\n\n    fetchDegreePlan();\n  }, []);\n\n  const swapCoursePlan = (fromCoursePlan, toCoursePlan) => {\n    let items = coursePlans.slice();\n    let fromIndex = -1;\n    let toIndex = -1;\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].id === fromCoursePlan.id) {\n        fromIndex = i;\n      }\n\n      if (items[i].id === toCoursePlan.id) {\n        toIndex = i;\n      }\n    }\n\n    if (fromIndex != -1 && toIndex != -1) {\n      let buf = items[fromIndex];\n      items[fromIndex] = items[toIndex];\n      items[toIndex] = buf;\n      setCoursePlans(items);\n    }\n  };\n  /* The dragstart event is fired when the user starts dragging an element or text selection */\n\n  /* event.target is the source element : that is dragged */\n\n  /* Firefox requires calling dataTransfer.setData for the drag to properly work */\n\n\n  const handleDragStart = data => event => {\n    let fromCoursePlan = JSON.stringify({\n      id: data.id\n    });\n    event.dataTransfer.setData(\"dragContent\", fromCoursePlan);\n  };\n\n  const nullHandleDragStart = data => event => {};\n  /* The dragover event is fired when an element or text selection is being dragged */\n\n  /* over a valid drop target (every few hundred milliseconds) */\n\n  /* The event is fired on the drop target(s) */\n\n\n  const handleDragOver = data => event => {\n    event.preventDefault(); // Necessary. Allows us to drop.\n\n    return false;\n  };\n  /* Fired when an element or text selection is dropped on a valid drop target */\n\n  /* The event is fired on the drop target(s) */\n\n\n  const handleDrop = data => event => {\n    event.preventDefault();\n    if (event.dataTransfer.getData(\"dragContent\") === '') return false;\n    let fromCoursePlan = JSON.parse(event.dataTransfer.getData(\"dragContent\"));\n    let toCoursePlan = {\n      id: data.id\n    };\n    swapCoursePlan(fromCoursePlan, toCoursePlan);\n    return false;\n  };\n\n  const onSave = async () => {\n    let _coursePlans = coursePlans.slice();\n\n    _coursePlans.forEach((coursePlan, index) => {\n      coursePlan.id = null;\n      coursePlan.sequence = index + 1;\n    });\n\n    try {\n      let res = await axios.put('/user/degreePlan', JSON.stringify(_coursePlans), config);\n      onToast('Successfully saved!', 'success');\n      setCoursePlans(res.data);\n    } catch (err) {\n      onToast('Server Error!', 'error');\n    }\n  };\n\n  const onSaveCoursePlan = () => {\n    /*        if (isNull(coursePlan.course)) {\r\n                onToast('Select course!', 'warn');\r\n                return\r\n            }*/\n    let _coursePlans = coursePlans.slice();\n\n    _coursePlans = _coursePlans.map(cp => {\n      if (cp.id !== coursePlan.id) return cp;\n      let _course = null;\n      if (coursePlan.course != null) _course = restraints.filter(restraint => restraint.course.courseId == coursePlan.course.courseId)[0].course;\n      cp.type = coursePlan.type === undefined || coursePlan.type === \"\" ? \"Elective\" : coursePlan.type;\n      cp.course = _course;\n      return cp;\n    });\n    setCoursePlans(_coursePlans);\n    setModalShow(false);\n  };\n\n  const onEditCoursePlan = coursePlan => {\n    setCoursePlan(coursePlan);\n    setModalShow(true);\n  };\n\n  const onDeleteCoursePlan = coursePlan => {\n    let _coursePlans = coursePlans.slice();\n\n    _coursePlans = _coursePlans.map(cp => {\n      if (cp.id !== coursePlan.id) return cp; //if(cp.type === 'Elect') cp.type = \"\";\n\n      cp.course = null;\n      return cp;\n    });\n    setCoursePlans(_coursePlans);\n  };\n\n  const onChangeCoursePlan = ({\n    target: {\n      value,\n      id\n    }\n  }) => {\n    if (id === 'type') {\n      setCoursePlan({ ...coursePlan,\n        [id]: value\n      });\n    } else if (id === 'courseId') {\n      if (value === \"\") {\n        setCoursePlan({ ...coursePlan,\n          course: null\n        });\n      } else {\n        setCoursePlan({ ...coursePlan,\n          course: {\n            courseId: value\n          }\n        });\n      }\n    }\n  };\n\n  const itemClassName = (idx, disabled) => {\n    let className = disabled ? 'disabled-course-item' : 'course-item';\n    if (idx % 8 === 3) className += ' course-item-left-sep';\n    if (idx % 8 === 4) className += ' course-item-right-sep';\n    return className;\n  };\n\n  const onAutoComplete = () => {\n    let _coursePlans = coursePlans.slice();\n\n    let usedCourses = _coursePlans.filter(_coursePlan => {\n      var _coursePlan$course;\n\n      if (_coursePlan.disabled) return false;\n      return ((_coursePlan$course = _coursePlan.course) === null || _coursePlan$course === void 0 ? void 0 : _coursePlan$course.courseId) !== undefined;\n    }).map(_coursePlan => _coursePlan.course);\n\n    let _restraints = restraints.filter(_restraint => {\n      return usedCourses.filter(_course => _course.courseId === _restraint.course.courseId) == 0;\n    });\n\n    let coreCourses = _restraints.filter(restraint => restraint.type == 'Core').map(restraint => restraint.course).sort((a, b) => 0.5 - Math.random());\n\n    let directedCourses = _restraints.filter(restraint => restraint.type == 'Directed').map(restraint => restraint.course).sort((a, b) => 0.5 - Math.random());\n\n    let eletiveCourses = _restraints.filter(restraint => restraint.type != 'Core' && restraint.type != 'Directed').map(restraint => restraint.course).sort((a, b) => 0.5 - Math.random());\n\n    let corePos = 0,\n        directedPos = 0,\n        electivePos = 0;\n\n    _coursePlans.filter(_coursePlan => {\n      var _coursePlan$course2;\n\n      if (_coursePlan.disabled) return false;\n      return ((_coursePlan$course2 = _coursePlan.course) === null || _coursePlan$course2 === void 0 ? void 0 : _coursePlan$course2.courseId) == undefined;\n    }).forEach(_coursePlan => {\n      if (_coursePlan.type === \"Core\") {\n        if (coreCourses.length > 0 && corePos < coreCourses.length) {\n          _coursePlan.course = coreCourses[corePos];\n          corePos++;\n        }\n      } else if (_coursePlan.type === \"Directed\") {\n        if (directedCourses.length && directedPos < directedCourses.length) {\n          _coursePlan.course = directedCourses[corePos];\n          corePos++;\n        }\n      } else {\n        if (eletiveCourses.length && electivePos < eletiveCourses.length) {\n          _coursePlan.course = eletiveCourses[electivePos];\n          _coursePlan.type = \"Elective\";\n          electivePos++;\n        }\n      }\n    });\n\n    setCoursePlans(_coursePlans);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"dark\",\n      variant: \"dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(LinkContainer, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Navbar.Brand, {\n            className: \"pull-left\",\n            children: \"Program Advisory Tool\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Navbar.Text, {\n          children: [\"Signed in as: \", /*#__PURE__*/_jsxDEV(\"a\", {\n            children: [user.firstName, \" \", user.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: signout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plan-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"bigHeader pl-6\",\n        children: [\" \", degreePlan.savedName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SemesterPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-1\",\n          children: yearList.map(year => /*#__PURE__*/_jsxDEV(YearPanel, {\n            year: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-11\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row plan-panel\",\n            children: coursePlans.map((coursePlan, index) => coursePlan.disabled ? /*#__PURE__*/_jsxDEV(DisabledCoursePlanItem, {\n              item: coursePlan,\n              classname: itemClassName(index, true),\n              draggable: false\n            }, coursePlan.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(UserCoursePlanItem, {\n              item: coursePlan,\n              classname: itemClassName(index, false),\n              draggable: coursePlan.type != \"\",\n              onDragStart: coursePlan.type != \"\" ? handleDragStart : nullHandleDragStart,\n              onDragOver: handleDragOver,\n              onDrop: handleDrop,\n              onEdit: onEditCoursePlan,\n              onDelete: onDeleteCoursePlan\n            }, coursePlan.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"justify-btn-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/dashboard\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            variant: \"outline-danger\",\n            className: \"cancel-btn\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          variant: \"outline-success\",\n          className: \"autocomplete-btn\",\n          onClick: onAutoComplete,\n          children: \"Auto Complete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          variant: \"outline-primary\",\n          className: \"save-btn\",\n          onClick: onSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      \"aria-labelledby\": \"coursePlan-edit-modal\",\n      centered: true,\n      show: modalShow,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: [/*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"coursePlan-edit-modal\",\n          children: \"Select Course\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"type\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n              \"aria-label\": \"Select level\",\n              onChange: onChangeCoursePlan,\n              value: coursePlan && coursePlan.type ? coursePlan.type : \"Elective\",\n              disabled: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Core\",\n                children: \"Core\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Directed\",\n                children: \"Directed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Elective\",\n                children: \"Elective\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: \"courseId\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Course\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n              \"aria-label\": \"Select level\",\n              onChange: onChangeCoursePlan,\n              value: coursePlan && coursePlan.course ? coursePlan.course.courseId : \"\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                placeholder: \"Select type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 33\n              }, this), restraints.filter(restraint => {\n                if (coursePlan === null) return false;\n                if (coursePlan.type === null) return false;\n\n                if (coursePlan.type === \"Elective\" || coursePlan.type === \"\") {\n                  if (restraint.type !== \"Core\" && restraint.type !== \"Directed\") return true;\n                  return false;\n                }\n\n                return restraint.type == coursePlan.type;\n              }).map(restraint => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: restraint.course.courseId,\n                children: [restraint.course.code, \" / \", restraint.course.name]\n              }, restraint.course.courseId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 41\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          onClick: onSaveCoursePlan,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => {\n            setModalShow(false);\n            setCoursePlan({});\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserDegreePlan, \"4Mr/y0ZafVg4ggtLXgJpsi6xxXo=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = UserDegreePlan;\nexport default UserDegreePlan;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserDegreePlan\");","map":{"version":3,"sources":["C:/Users/itswa/Desktop/Complete/frontend/src/components/User/DegreePlan/UserDegreePlan.js"],"names":["React","useEffect","useState","useDispatch","logout","Link","useSelector","Button","Container","Navbar","Row","Col","Modal","Form","LinkContainer","UserCoursePlanItem","DisabledCoursePlanItem","axios","config","YearPanel","SemesterPanel","useParams","ToastContainer","toast","isNull","onToast","UserDegreePlan","dispatch","signout","degreePlanId","user","state","auth","degreePlan","setDegreePlan","coursePlans","setCoursePlans","coursePlan","setCoursePlan","restraints","setRestraints","modalShow","setModalShow","yearList","setYearList","fetchDegreePlan","res","get","_coursePlans","data","sort","a","b","sequence","_yearList","i","parseInt","length","push","err","swapCoursePlan","fromCoursePlan","toCoursePlan","items","slice","fromIndex","toIndex","id","buf","handleDragStart","event","JSON","stringify","dataTransfer","setData","nullHandleDragStart","handleDragOver","preventDefault","handleDrop","getData","parse","onSave","forEach","index","put","onSaveCoursePlan","map","cp","_course","course","filter","restraint","courseId","type","undefined","onEditCoursePlan","onDeleteCoursePlan","onChangeCoursePlan","target","value","itemClassName","idx","disabled","className","onAutoComplete","usedCourses","_coursePlan","_restraints","_restraint","coreCourses","Math","random","directedCourses","eletiveCourses","corePos","directedPos","electivePos","firstName","lastName","savedName","year","code","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {logout} from '../../../store/actions/authActions';\r\nimport {Link} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport {Button, Container, Navbar, Row, Col, Modal, Form} from 'react-bootstrap';\r\nimport {LinkContainer} from \"react-router-bootstrap\";\r\nimport UserCoursePlanItem from \"./UserCoursePlanItem\";\r\nimport DisabledCoursePlanItem from \"../../Admin/DegreePlan/DisabledCoursePlanItem\";\r\nimport axios from \"axios\";\r\nimport {config} from \"../../../constants\";\r\nimport YearPanel from \"../../Admin/DegreePlan/YearPanel\";\r\nimport SemesterPanel from \"../../Admin/DegreePlan/SemesterPanel\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {isNull} from \"../../../utils/stringUtil\";\r\nimport {onToast} from \"../../../utils/toastUtil\"\r\n\r\nconst UserDegreePlan = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const signout = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    let { degreePlanId } = useParams();\r\n\r\n    const {user} = useSelector((state) => state.auth);\r\n\r\n    const [degreePlan, setDegreePlan] = useState({})\r\n    const [coursePlans, setCoursePlans] = useState([])\r\n    const [coursePlan, setCoursePlan] = useState({})\r\n    const [restraints, setRestraints] = useState([])\r\n    const [modalShow, setModalShow] = useState(false)\r\n\r\n    const [yearList, setYearList] = useState([])\r\n\r\n    useEffect(() => {\r\n        // here goes the data fetching\r\n        const fetchDegreePlan = async () => {\r\n            try {\r\n                let res = await axios.get('/user/degreePlan/' + degreePlanId, config)\r\n                let _coursePlans = res.data.coursePlans.sort((a, b) => {\r\n                    return a.sequence - b.sequence;\r\n                })\r\n                setDegreePlan(_coursePlans[0].degreePlan)\r\n                setCoursePlans(_coursePlans)\r\n                let _yearList = []\r\n                for(let i = 1; i <= parseInt(_coursePlans.length + 4) / 8; i ++) _yearList.push(i);\r\n                setYearList(_yearList);\r\n\r\n                setRestraints(res.data.restraints)\r\n\r\n            } catch (err) {\r\n                onToast('Server Error!', 'error')\r\n            }\r\n\r\n        }\r\n        fetchDegreePlan()\r\n    }, [])\r\n\r\n    const swapCoursePlan = (fromCoursePlan, toCoursePlan) => {\r\n        let items = coursePlans.slice();\r\n        let fromIndex = -1;\r\n        let toIndex = -1;\r\n\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].id === fromCoursePlan.id) {\r\n                fromIndex = i;\r\n            }\r\n            if (items[i].id === toCoursePlan.id) {\r\n                toIndex = i;\r\n            }\r\n        }\r\n\r\n        if (fromIndex != -1 && toIndex != -1) {\r\n\r\n            let buf = items[fromIndex];\r\n            items[fromIndex] = items[toIndex];\r\n            items[toIndex] = buf;\r\n\r\n            setCoursePlans(items);\r\n\r\n        }\r\n    };\r\n\r\n    /* The dragstart event is fired when the user starts dragging an element or text selection */\r\n    /* event.target is the source element : that is dragged */\r\n    /* Firefox requires calling dataTransfer.setData for the drag to properly work */\r\n    const handleDragStart = data => event => {\r\n        let fromCoursePlan = JSON.stringify({id: data.id});\r\n        event.dataTransfer.setData(\"dragContent\", fromCoursePlan);\r\n    };\r\n\r\n    const nullHandleDragStart = data => event => {\r\n\r\n    };\r\n\r\n    /* The dragover event is fired when an element or text selection is being dragged */\r\n    /* over a valid drop target (every few hundred milliseconds) */\r\n    /* The event is fired on the drop target(s) */\r\n    const handleDragOver = data => event => {\r\n        event.preventDefault(); // Necessary. Allows us to drop.\r\n        return false;\r\n    };\r\n\r\n    /* Fired when an element or text selection is dropped on a valid drop target */\r\n    /* The event is fired on the drop target(s) */\r\n    const handleDrop = data => event => {\r\n        event.preventDefault();\r\n\r\n        if(event.dataTransfer.getData(\"dragContent\") === '') return false;\r\n        let fromCoursePlan = JSON.parse(event.dataTransfer.getData(\"dragContent\"));\r\n        let toCoursePlan = {id: data.id};\r\n\r\n        swapCoursePlan(fromCoursePlan, toCoursePlan);\r\n        return false;\r\n    };\r\n\r\n    const onSave = async () => {\r\n        let _coursePlans = coursePlans.slice();\r\n        _coursePlans.forEach((coursePlan, index) => {\r\n            coursePlan.id = null;\r\n            coursePlan.sequence = index + 1;\r\n        });\r\n\r\n        try {\r\n            let res = await axios.put('/user/degreePlan', JSON.stringify(_coursePlans), config)\r\n            onToast('Successfully saved!', 'success');\r\n            setCoursePlans(res.data);\r\n        } catch (err) {\r\n            onToast('Server Error!', 'error');\r\n        }\r\n\r\n    }\r\n\r\n    const onSaveCoursePlan = () => {\r\n/*        if (isNull(coursePlan.course)) {\r\n            onToast('Select course!', 'warn');\r\n            return\r\n        }*/\r\n\r\n        let _coursePlans = coursePlans.slice()\r\n        _coursePlans = _coursePlans.map((cp) => {\r\n            if(cp.id !== coursePlan.id) return cp\r\n            let _course = null;\r\n            if(coursePlan.course != null) _course = restraints.filter((restraint) => (restraint.course.courseId == coursePlan.course.courseId))[0].course\r\n            cp.type = (coursePlan.type === undefined || coursePlan.type === \"\") ? \"Elective\" : coursePlan.type;\r\n            cp.course = _course;\r\n            return cp;\r\n        })\r\n        setCoursePlans(_coursePlans);\r\n        setModalShow(false);\r\n    }\r\n\r\n    const onEditCoursePlan = (coursePlan) => {\r\n        setCoursePlan(coursePlan);\r\n        setModalShow(true);\r\n    }\r\n\r\n    const onDeleteCoursePlan = (coursePlan) => {\r\n        let _coursePlans = coursePlans.slice()\r\n        _coursePlans = _coursePlans.map((cp) => {\r\n            if(cp.id !== coursePlan.id) return cp\r\n            //if(cp.type === 'Elect') cp.type = \"\";\r\n\r\n            cp.course = null;\r\n            return cp;\r\n        })\r\n        setCoursePlans(_coursePlans);\r\n    }\r\n\r\n    const onChangeCoursePlan = ({target: {value, id}}) => {\r\n        if(id === 'type') {\r\n            setCoursePlan({\r\n                ...coursePlan,\r\n                [id]: value\r\n            })\r\n        } else if(id === 'courseId') {\r\n            if(value === \"\") {\r\n                setCoursePlan({\r\n                    ...coursePlan,\r\n                    course: null\r\n                })\r\n            } else {\r\n                setCoursePlan({\r\n                    ...coursePlan,\r\n                    course: {\r\n                        courseId: value\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const itemClassName = (idx, disabled) => {\r\n        let className = disabled ? 'disabled-course-item' : 'course-item';\r\n        if(idx % 8 === 3) className += ' course-item-left-sep';\r\n        if(idx % 8 === 4) className += ' course-item-right-sep';\r\n        return className;\r\n    }\r\n\r\n    const onAutoComplete = () => {\r\n        let _coursePlans = coursePlans.slice();\r\n\r\n        let usedCourses = _coursePlans\r\n            .filter((_coursePlan) => {\r\n                if(_coursePlan.disabled) return false\r\n                return _coursePlan.course?.courseId !== undefined\r\n            })\r\n            .map((_coursePlan) => (_coursePlan.course));\r\n\r\n        let _restraints = restraints.filter((_restraint) =>{\r\n            return usedCourses.filter((_course) => (_course.courseId === _restraint.course.courseId)) == 0\r\n        })\r\n\r\n        let coreCourses = _restraints\r\n            .filter((restraint) => restraint.type == 'Core')\r\n            .map((restraint) => restraint.course)\r\n            .sort((a, b) => 0.5 - Math.random());\r\n        let directedCourses = _restraints\r\n            .filter((restraint) => restraint.type == 'Directed')\r\n            .map((restraint) => restraint.course)\r\n            .sort((a, b) => 0.5 - Math.random());\r\n        let eletiveCourses = _restraints\r\n            .filter((restraint) => (restraint.type != 'Core' && restraint.type != 'Directed'))\r\n            .map((restraint) => restraint.course)\r\n            .sort((a, b) => 0.5 - Math.random());\r\n        let corePos = 0, directedPos = 0, electivePos = 0\r\n\r\n        _coursePlans\r\n            .filter((_coursePlan) => {\r\n                if(_coursePlan.disabled) return false\r\n                return _coursePlan.course?.courseId == undefined\r\n            })\r\n            .forEach((_coursePlan) => {\r\n                if(_coursePlan.type === \"Core\") {\r\n                    if(coreCourses.length > 0 && corePos < coreCourses.length) {\r\n                        _coursePlan.course = coreCourses[corePos]\r\n                        corePos ++;\r\n                    }\r\n                } else if(_coursePlan.type === \"Directed\") {\r\n                    if(directedCourses.length && directedPos < directedCourses.length) {\r\n                        _coursePlan.course = directedCourses[corePos]\r\n                        corePos ++\r\n                    }\r\n                } else {\r\n                    if(eletiveCourses.length && electivePos < eletiveCourses.length) {\r\n                        _coursePlan.course = eletiveCourses[electivePos];\r\n                        _coursePlan.type = \"Elective\"\r\n                        electivePos ++\r\n                    }\r\n                }\r\n            })\r\n\r\n        setCoursePlans(_coursePlans);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Container>\r\n                    <LinkContainer to=\"/\">\r\n                        <Navbar.Brand className=\"pull-left\">Program Advisory Tool</Navbar.Brand>\r\n                    </LinkContainer>\r\n                    <Navbar.Text>\r\n                        Signed in as: <a>{user.firstName} {user.lastName}</a>\r\n                    </Navbar.Text>\r\n                    <Button onClick={signout}>Logout</Button>\r\n                </Container>\r\n            </Navbar>\r\n            <div className=\"plan-board\" >\r\n                <h2 className=\"bigHeader pl-6\"> { degreePlan.savedName} </h2>\r\n                <SemesterPanel />\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\"\r\n                    >\r\n                        {\r\n                            yearList.map((year) => (\r\n                                <YearPanel year={year} key={year}/>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <div className=\"col-11\">\r\n                        <div className=\"row plan-panel\">\r\n                            {\r\n                                coursePlans.map((coursePlan, index) => (\r\n                                    coursePlan.disabled ?\r\n                                        <DisabledCoursePlanItem\r\n                                            item={coursePlan}\r\n                                            key={coursePlan.id}\r\n                                            classname={ itemClassName(index, true) }\r\n                                            draggable={ false }\r\n                                        /> :\r\n                                        <UserCoursePlanItem\r\n                                            item={coursePlan}\r\n                                            key={coursePlan.id}\r\n                                            classname={ itemClassName(index, false) }\r\n                                            draggable={ coursePlan.type != \"\" }\r\n                                            onDragStart={ coursePlan.type != \"\" ? handleDragStart : nullHandleDragStart}\r\n                                            onDragOver={handleDragOver}\r\n                                            onDrop={handleDrop}\r\n                                            onEdit={onEditCoursePlan}\r\n                                            onDelete={onDeleteCoursePlan}\r\n                                        />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"justify-btn-group mb-3\" >\r\n                    <Link to=\"/dashboard\">\r\n                        <Button size=\"sm\" variant=\"outline-danger\" className=\"cancel-btn\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Link>\r\n                    <Button size=\"sm\" variant=\"outline-success\" className=\"autocomplete-btn\" onClick={onAutoComplete}>\r\n                        Auto Complete\r\n                    </Button>\r\n                    <Button size=\"sm\" variant=\"outline-primary\" className=\"save-btn\" onClick={onSave}>\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <ToastContainer />\r\n\r\n            <Modal\r\n                aria-labelledby=\"coursePlan-edit-modal\"\r\n                centered\r\n                show={modalShow}\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title id=\"coursePlan-edit-modal\">\r\n                        Select Course\r\n                    </Modal.Title>\r\n                    <ToastContainer />\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group className=\"mb-3\" controlId=\"type\">\r\n                            <Form.Label>Type</Form.Label>\r\n                            <Form.Select aria-label=\"Select level\"\r\n                                         onChange={onChangeCoursePlan}\r\n                                         value={ coursePlan && coursePlan.type ? coursePlan.type : \"Elective\"} disabled>\r\n                                <option value=\"Core\">Core</option>\r\n                                <option value=\"Directed\">Directed</option>\r\n                                <option value=\"Elective\">Elective</option>\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"courseId\">\r\n                            <Form.Label>Course</Form.Label>\r\n                            <Form.Select aria-label=\"Select level\"\r\n                                         onChange={onChangeCoursePlan}\r\n                                         value={ (coursePlan && coursePlan.course) ? coursePlan.course.courseId : \"\"}>\r\n                                <option value=\"\" placeholder=\"Select type\"></option>\r\n                                {\r\n                                    restraints.filter( (restraint) => {\r\n                                        if(coursePlan === null) return false\r\n                                        if(coursePlan.type === null) return false\r\n                                        if(coursePlan.type === \"Elective\" || coursePlan.type === \"\") {\r\n                                            if(restraint.type !== \"Core\" && restraint.type !== \"Directed\") return true;\r\n                                            return false;\r\n                                        }\r\n                                        return restraint.type == coursePlan.type\r\n                                    } ).map( (restraint) =>\r\n                                        <option key={restraint.course.courseId} value={restraint.course.courseId}>{restraint.course.code} / {restraint.course.name}</option>\r\n                                    )\r\n                                }\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={onSaveCoursePlan}>\r\n                        Save\r\n                    </Button>\r\n                    <Button variant=\"secondary\" onClick={() => {\r\n                        setModalShow(false)\r\n                        setCoursePlan({})\r\n                    }}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDegreePlan;\r\n"]},"metadata":{},"sourceType":"module"}