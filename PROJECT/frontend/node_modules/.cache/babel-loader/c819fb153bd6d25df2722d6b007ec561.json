{"ast":null,"code":"/*\n * copied from https://github.com/imbhargav5/rooks/blob/master/packages/shared/useKeyRef.ts\n */\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nvar defaultOptions = {\n  when: true,\n  eventTypes: [\"keydown\"]\n};\n/**\n * useKey hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keyList\n * @param {function} callback\n * @param {Options} options\n */\n\nfunction useKey(input, callback, opts) {\n  var keyList = useMemo(() => Array.isArray(input) ? input : [input], [input]);\n  var options = Object.assign({}, defaultOptions, opts);\n  var {\n    when,\n    eventTypes\n  } = options;\n  var callbackRef = useRef(callback);\n  var {\n    target\n  } = options;\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n  var handle = useCallback(e => {\n    if (keyList.some(k => e.key === k || e.code === k)) {\n      callbackRef.current(e);\n    }\n  }, [keyList]);\n  useEffect(() => {\n    if (when && typeof window !== \"undefined\") {\n      var targetNode = target ? target[\"current\"] : window;\n      eventTypes.forEach(eventType => {\n        targetNode && targetNode.addEventListener(eventType, handle);\n      });\n      return () => {\n        eventTypes.forEach(eventType => {\n          targetNode && targetNode.removeEventListener(eventType, handle);\n        });\n      };\n    }\n  }, [when, eventTypes, keyList, target, callback]);\n}\n\nexport { useKey };","map":{"version":3,"sources":["../../../src/hooks/use-key.tsx"],"names":["defaultOptions","when","eventTypes","keyList","useMemo","Array","options","Object","callbackRef","useRef","target","useEffect","handle","useCallback","e","k","targetNode","eventType"],"mappings":"AAAA;AACA;AACA;AACA,SAAA,WAAA,EAAA,SAAA,EAAA,OAAA,EAAA,MAAA,QAAA,OAAA;AAkBA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,IAAI,EADiB,IAAA;AAErBC,EAAAA,UAAU,EAAE,CAAA,SAAA;AAFS,CAAvB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAA,MAAA,CAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EAIQ;AACN,MAAMC,OAA+B,GAAGC,OAAO,CAC7C,MAAOC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAA+B,CADO,KACP,CADO,EAE7C,CAFF,KAEE,CAF6C,CAA/C;AAIA,MAAMC,OAAO,GAAGC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAAA,cAAAA,EAAhB,IAAgBA,CAAhB;AACA,MAAM;AAAA,IAAA,IAAA;AAAQL,IAAAA;AAAR,MAAN,OAAA;AACA,MAAMM,WAAW,GAAGC,MAAM,CAA1B,QAA0B,CAA1B;AACA,MAAM;AAAEC,IAAAA;AAAF,MAAN,OAAA;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdH,IAAAA,WAAW,CAAXA,OAAAA,GAAAA,QAAAA;AADFG,GAAS,CAATA;AAIA,MAAMC,MAAM,GAAGC,WAAW,CACvBC,CAAD,IAAsB;AACpB,QAAIX,OAAO,CAAPA,IAAAA,CAAcY,CAAD,IAAOD,CAAC,CAADA,GAAAA,KAAAA,CAAAA,IAAeA,CAAC,CAADA,IAAAA,KAAvC,CAAIX,CAAJ,EAAsD;AACpDK,MAAAA,WAAW,CAAXA,OAAAA,CAAAA,CAAAA;AACD;AAJqB,GAAA,EAMxB,CANF,OAME,CANwB,CAA1B;AASAG,EAAAA,SAAS,CAAC,MAAW;AACnB,QAAIV,IAAI,IAAI,OAAA,MAAA,KAAZ,WAAA,EAA2C;AACzC,UAAMe,UAAU,GAAGN,MAAM,GAAGA,MAAM,CAAT,SAAS,CAAT,GAAzB,MAAA;AACAR,MAAAA,UAAU,CAAVA,OAAAA,CAAoBe,SAAD,IAAe;AAChCD,QAAAA,UAAU,IAAIA,UAAU,CAAVA,gBAAAA,CAAAA,SAAAA,EAAdA,MAAcA,CAAdA;AADFd,OAAAA;AAGA,aAAO,MAAM;AACXA,QAAAA,UAAU,CAAVA,OAAAA,CAAoBe,SAAD,IAAe;AAChCD,UAAAA,UAAU,IAAIA,UAAU,CAAVA,mBAAAA,CAAAA,SAAAA,EAAdA,MAAcA,CAAdA;AADFd,SAAAA;AADF,OAAA;AAKD;AAXM,GAAA,EAYN,CAAA,IAAA,EAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAZHS,QAYG,CAZM,CAATA;AAaD;;AAED,SAAA,MAAA","sourcesContent":["/*\n * copied from https://github.com/imbhargav5/rooks/blob/master/packages/shared/useKeyRef.ts\n */\nimport { Ref, useCallback, useEffect, useMemo, useRef } from \"react\";\n\ninterface Options {\n  /**\n   * Condition which if true, will enable the event listeners\n   */\n  when?: boolean;\n  /**\n   * Keyboardevent types to listen for. Valid options are keyDown, keyPress and keyUp\n   */\n  eventTypes?: Array<string | number>;\n  /**\n   * target ref on which the events should be listened. If no target is specified,\n   * events are listened to on the window\n   */\n  target?: Ref<HTMLElement> | null;\n}\n\nconst defaultOptions = {\n  when: true,\n  eventTypes: [\"keydown\"],\n};\n\n/**\n * useKey hook\n *\n * Fires a callback on keyboard events like keyDown, keyPress and keyUp\n *\n * @param {[string|number]} keyList\n * @param {function} callback\n * @param {Options} options\n */\nfunction useKey(\n  input: string | number | Array<string | number>,\n  callback: (e: KeyboardEvent) => any,\n  opts?: Options\n): void {\n  const keyList: Array<string | number> = useMemo(\n    () => (Array.isArray(input) ? input : [input]),\n    [input]\n  );\n  const options = Object.assign({}, defaultOptions, opts);\n  const { when, eventTypes } = options;\n  const callbackRef = useRef<(e: KeyboardEvent) => any>(callback);\n  const { target } = options;\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  const handle = useCallback(\n    (e: KeyboardEvent) => {\n      if (keyList.some((k) => e.key === k || e.code === k)) {\n        callbackRef.current(e);\n      }\n    },\n    [keyList]\n  );\n\n  useEffect((): any => {\n    if (when && typeof window !== \"undefined\") {\n      const targetNode = target ? target[\"current\"] : window;\n      eventTypes.forEach((eventType) => {\n        targetNode && targetNode.addEventListener(eventType, handle);\n      });\n      return () => {\n        eventTypes.forEach((eventType) => {\n          targetNode && targetNode.removeEventListener(eventType, handle);\n        });\n      };\n    }\n  }, [when, eventTypes, keyList, target, callback]);\n}\n\nexport { useKey };\n"]},"metadata":{},"sourceType":"module"}